Index: sipcalc-1.1.6/include/sub.h
===================================================================
--- sipcalc-1.1.6.orig/include/sub.h	2015-10-31 23:02:05.421582785 +0100
+++ sipcalc-1.1.6/include/sub.h	2015-10-31 23:51:46.090075893 +0100
@@ -183,14 +183,21 @@
 #define IFT_UNKWN 5
 
 /* v4 args */
-#define CF_INFO     0x01
-#define CF_BITMAP   0x02
-#define CIDR_INFO   0x04
-#define CIDR_BITMAP 0x08
-#define NET_INFO    0x10
-#define V4SPLIT     0x20
-#define V4VERBSPLIT 0x40
-#define C_WILDCARD  0x80
+#define CF_INFO     0x001
+#define CF_BITMAP   0x002
+#define CIDR_INFO   0x004
+#define CIDR_BITMAP 0x008
+#define NET_INFO    0x010
+#define V4SPLIT     0x020
+#define V4VERBSPLIT 0x040
+#define C_WILDCARD  0x080
+#define V4MIN       0x100
+#define V4MAX       0x200
+#define V4NETMASK   0x400
+#define BITNOT      0x800
+#define V4NETMASKLEN 0x1000
+#define V4HOSTADDR  0x2000
+#define V4NETADDR   0x4000
 
 /* v6 args */
 #define V6_INFO     0x01
Index: sipcalc-1.1.6/src/sub-output.c
===================================================================
--- sipcalc-1.1.6.orig/src/sub-output.c	2015-10-31 23:02:05.421582785 +0100
+++ sipcalc-1.1.6/src/sub-output.c	2015-11-01 00:22:02.501954104 +0100
@@ -695,6 +695,15 @@
 	printf
 	    ("Usage: %s [OPTIONS]... <[ADDRESS]... [INTERFACE]... | [-]>\n\n",
 	     NAME);
+	printf ("Extra options:\n");
+	printf ("  -m, --min\t\t\tMinimal IP address.\n");
+	printf ("  -M, --max\t\t\tMaximal IP address.\n");
+	printf ("  -N, --netmask\t\t\tNetwork mask.\n");
+	printf ("  -L, --netmasklen\t\tNetwork mask length in bits.\n");
+	printf ("  -H, --hostaddr\t\tHost address.\n");
+	printf ("  -W, --netaddr\t\t\tNetwork address.\n");
+	printf ("  -B, --bitmap\t\t\tEnable bitmap notation.\n");
+	printf ("\n");
 	printf ("Global options:\n");
 	printf ("  -a, --all\t\t\tAll possible information.\n");
 	printf ("  -d, --resolve\t\t\tEnable name resolution.\n");
@@ -754,6 +763,15 @@
 	printf
 	    ("Usage: %s [OPTIONS]... <[ADDRESS]... [INTERFACE]... | [-]>\n\n",
 	     NAME);
+	printf ("Extra options:\n");
+	printf ("  -m\t\tMinimal IP address.\n");
+	printf ("  -M\t\tMaximal IP address.\n");
+	printf ("  -N\t\tNetwork mask.\n");
+	printf ("  -L, --netmasklen\t\tNetwork mask length in bits.\n");
+	printf ("  -H, --hostaddr\t\tHost address.\n");
+	printf ("  -W, --netaddr\t\t\tNetwork address.\n");
+	printf ("  -B\t\tEnable bitmap notation.\n");
+	printf ("\n");
 	printf ("Global options:\n");
 	printf ("  -a\t\tAll possible information.\n");
 	printf ("  -d\t\tEnable name resolution.\n");
@@ -824,3 +842,58 @@
 	printf
 	    ("warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n");
 }
+
+void
+print_minimal (struct if_info *ifi, char bitnot){
+	if(bitnot){
+		printf ("%s", numtobitmap (ifi->v4ad.n_naddr + 1));
+	}
+	else{
+		printf ("%s", numtoquad (ifi->v4ad.n_naddr + 1));
+	}
+}
+
+void
+print_maximal (struct if_info *ifi, char bitnot){
+	if(bitnot){
+		printf ("%s", numtobitmap (ifi->v4ad.n_broadcast - 1));
+	}
+	else{
+		printf ("%s", numtoquad (ifi->v4ad.n_broadcast - 1));
+	}
+}
+
+void
+print_hostaddr (struct if_info *ifi, char bitnot){
+	if(bitnot){
+		printf ("%s", numtobitmap (ifi->v4ad.n_haddr));
+	}
+	else{
+		printf ("%s", numtoquad (ifi->v4ad.n_haddr));
+	}
+}
+
+void
+print_netaddr (struct if_info *ifi, char bitnot){
+	if(bitnot){
+		printf ("%s", numtobitmap (ifi->v4ad.n_naddr));
+	}
+	else{
+		printf ("%s", numtoquad (ifi->v4ad.n_naddr));
+	}
+}
+
+void
+print_netmask (struct if_info *ifi, char bitnot){
+	if(bitnot){
+		printf ("%s", numtobitmap (ifi->v4ad.n_nmask));
+	}
+	else{
+		printf ("%s", numtoquad (ifi->v4ad.n_nmask));
+	}
+}
+
+void
+print_netmask_len (struct if_info *ifi){
+	printf ("%d", ifi->v4ad.n_nmaskbits);
+}
Index: sipcalc-1.1.6/src/sub.c
===================================================================
--- sipcalc-1.1.6.orig/src/sub.c	2015-10-31 23:02:05.421582785 +0100
+++ sipcalc-1.1.6/src/sub.c	2015-10-31 23:54:57.956739497 +0100
@@ -54,6 +54,7 @@
 extern char *optarg;
 extern int optind, opterr, optopt;
 int resolve;
+char MINIMAL_OUT = 0;
 
 int
 out_cmdline (struct if_info *ifarg_cur, int v4args, struct misc_args m_argv4,
@@ -63,23 +64,35 @@
 
 	ret = 0;
 
-	if (ifarg_cur->type == IFT_V4) {
-		printf ("-[ipv4 : %s] - %d\n", ifarg_cur->cmdstr, index);
-		ret = get_addrv4 (ifarg_cur);
-	}
+	if(MINIMAL_OUT){
+		if (ifarg_cur->type == IFT_V4) {
+			ret = get_addrv4 (ifarg_cur);
+		}
 
-	if (ifarg_cur->type == IFT_V6) {
-		printf ("-[ipv6 : %s] - %d\n", ifarg_cur->cmdstr, index);
-		ret = get_addrv6 (ifarg_cur);
+		if (ifarg_cur->type == IFT_V6) {
+			ret = get_addrv6 (ifarg_cur);
+		}
 	}
+	else{
+		if (ifarg_cur->type == IFT_V4) {
+			printf ("-[ipv4 : %s] - %d\n", ifarg_cur->cmdstr, index);
+			ret = get_addrv4 (ifarg_cur);
+		}
+
+		if (ifarg_cur->type == IFT_V6) {
+			printf ("-[ipv6 : %s] - %d\n", ifarg_cur->cmdstr, index);
+			ret = get_addrv6 (ifarg_cur);
+		}
 
+	}
+	
 	if (ifarg_cur->type == IFT_INTV4 || ifarg_cur->type == IFT_INTV6) {
 		printf ("-[int-ipv4 : %s] - %d\n", ifarg_cur->cmdstr, index);
 		if (ifarg_cur->errorstr[0] != '\0') {
 			printf ("\n-[ERR : %s]\n\n-\n", ifarg_cur->errorstr);
 			return 0;
 		}
-		
+
 		ret = get_addrv4 (ifarg_cur);
 	}
 
@@ -93,16 +106,20 @@
 		printf ("\n-[ERR : Invalid address]\n\n-\n");
 		return 0;
 	}
+	
 	if (ret == -2) {
 		printf ("\n-[ERR : Invalid netmask]\n\n-\n");
 		return 0;
 	}
+	
+	if(!MINIMAL_OUT){
+		printf ("\n");
+	}
 
 	if (ifarg_cur->type == IFT_V4 || ifarg_cur->type == IFT_INTV4) {
 		if (!v4args)
 			v4args = CIDR_INFO;
-
-		printf ("\n");
+		
 		if ((v4args & CF_INFO) == CF_INFO)
 			print_cf_info_v4 (ifarg_cur);
 		if ((v4args & CIDR_INFO) == CIDR_INFO)
@@ -117,14 +134,24 @@
 			show_split_networks_v4 (ifarg_cur, m_argv4.splitmask, v4args, m_argv4);
 		if ((v4args & C_WILDCARD) == C_WILDCARD)
 			show_c_wildcard_info_v4 (ifarg_cur);
-		printf ("-\n");
+		if ((v4args & V4MIN) == V4MIN)
+			print_minimal (ifarg_cur, (v4args & BITNOT) == BITNOT);
+		if ((v4args & V4MAX) == V4MAX)
+			print_maximal (ifarg_cur, (v4args & BITNOT) == BITNOT);
+		if ((v4args & V4HOSTADDR) == V4HOSTADDR)
+			print_hostaddr (ifarg_cur, (v4args & BITNOT) == BITNOT);
+		if ((v4args & V4NETADDR) == V4NETADDR)
+			print_netaddr (ifarg_cur, (v4args & BITNOT) == BITNOT);
+		if ((v4args & V4NETMASK) == V4NETMASK)
+			print_netmask (ifarg_cur, (v4args & BITNOT) == BITNOT);
+		if ((v4args & V4NETMASKLEN) == V4NETMASKLEN)
+			print_netmask_len (ifarg_cur);
 	}
 
 	if (ifarg_cur->type == IFT_V6 || ifarg_cur->type == IFT_INTV6) {
 		if (!v6args)
 			v6args = V6_INFO;
 
-		printf ("\n");
 		if ((v6args & V6_INFO) == V6_INFO)
 			print_v6 (ifarg_cur);
 		if ((v6args & V4INV6) == V4INV6)
@@ -133,8 +160,14 @@
 			print_rev_v6 (ifarg_cur);
 		if ((v6args & V6SPLIT) == V6SPLIT)
 			show_split_networks_v6 (ifarg_cur, m_argv6.v6splitmask, v6args, m_argv6);
+	}
+	
+	if(!MINIMAL_OUT){
 		printf ("-\n");
 	}
+	else{
+		printf("\n");
+	}
 
 	return 0;
 }
@@ -697,6 +730,13 @@
 		{"split-verbose", no_argument, 0, 'u'},
 		{"resolve", no_argument, 0, 'd'},
 		{"wildcard", no_argument, 0, 'w'},
+		{"min", no_argument, 0, 'm'},
+		{"max", no_argument, 0, 'M'},
+		{"netmask", no_argument, 0, 'N'},
+		{"netmasklen", no_argument, 0, 'L'},
+		{"hostaddr", no_argument, 0, 'H'},
+		{"netaddr", no_argument, 0, 'W'},
+		{"bitmap", no_argument, 0, 'B'},
 		{0, 0, 0, 0}
 	};
 #endif
@@ -739,10 +779,10 @@
 	 */
 #ifdef HAVE_GETOPT_LONG
 	while ((ch =
-		getopt_long (argc, argv, "abcdehHiI:n:rs:S:tuvVwx4:6:", l_o,
+		getopt_long (argc, argv, "abcdBehHiI:mMn:NLHWrs:S:tuvVwx4:6:", l_o,
 			     NULL)) != -1) {
 #else
-	while ((ch = getopt (argc, argv, "abcdehHiI:n:rs:S:tuvVwx4:6:")) != -1) {
+	while ((ch = getopt (argc, argv, "abcdBehHiI:mMn:NLHWrs:S:tuvVwx4:6:")) != -1) {
 #endif
 		switch (ch) {
 		case 'a':
@@ -767,7 +807,6 @@
 			v6args = v6args | V4INV6;
 			break;
 		case 'h':
-		case 'H':
 			print_help ();
 			return 0;
 		case 'i':
@@ -847,6 +886,33 @@
 			abox_cur = new_arg (abox_cur);
 
 			break;
+		case 'B':
+			v4args = v4args | BITNOT;
+			break;
+		case 'm':
+			v4args = v4args | V4MIN;
+			MINIMAL_OUT = 1;
+			break;
+		case 'M':
+			v4args = v4args | V4MAX;
+			MINIMAL_OUT = 1;
+			break;
+		case 'H':
+			v4args = v4args | V4HOSTADDR;
+			MINIMAL_OUT = 1;
+			break;
+		case 'W':
+			v4args = v4args | V4NETADDR;
+			MINIMAL_OUT = 1;
+			break;
+		case 'N':
+			v4args = v4args | V4NETMASK;
+			MINIMAL_OUT = 1;
+			break;
+		case 'L':
+			v4args = v4args | V4NETMASKLEN;
+			MINIMAL_OUT = 1;
+			break;
 		default:
 			print_short_help ();
 			return 0;
